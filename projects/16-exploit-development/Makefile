# ============================================================================
# Makefile - Exploit Development Framework
# ============================================================================
# Automatisation complète pour le développement d'exploits et la recherche
# de vulnérabilités avec support des techniques avancées d'exploitation.
#
# Author: Cybersecurity Portfolio
# Version: 1.0.0
# Last Updated: January 28, 2024
# ============================================================================

# Variables de configuration
PROJECT_NAME := exploit-development
VERSION := 1.0.0
PYTHON := python3
PIP := pip3

# Chemins principaux
PROJECT_ROOT := $(shell pwd)
SRC_DIR := $(PROJECT_ROOT)/src
DOCS_DIR := $(PROJECT_ROOT)/docs
EXAMPLES_DIR := $(PROJECT_ROOT)/examples
TOOLS_DIR := $(PROJECT_ROOT)/tools
TESTS_DIR := $(PROJECT_ROOT)/tests
PAYLOADS_DIR := $(PROJECT_ROOT)/payloads
RESEARCH_DIR := $(PROJECT_ROOT)/research

# Chemins des outils
EXPLOITS_DIR := $(SRC_DIR)
VULNS_DIR := $(EXAMPLES_DIR)/vulnerable-apps
POCS_DIR := $(EXAMPLES_DIR)/proof-of-concepts
TEMPLATES_DIR := $(TOOLS_DIR)/templates

# Chemins de sortie
OUTPUT_DIR := $(PROJECT_ROOT)/output
REPORTS_DIR := $(OUTPUT_DIR)/reports
BUILDS_DIR := $(OUTPUT_DIR)/builds
LOGS_DIR := $(OUTPUT_DIR)/logs

# Configuration des outils
METASPLOIT_PATH := /opt/metasploit-framework
BURP_JAR := $(TOOLS_DIR)/burpsuite_community.jar
GHIDRA_PATH := /opt/ghidra
IDA_PATH := /opt/ida

# Architectures supportées
ARCHS := x86 x64 arm arm64

# Plateformes supportées  
PLATFORMS := windows linux macos

# Couleurs pour l'affichage
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
WHITE := \033[1;37m
NC := \033[0m # No Color

# ============================================================================
# AIDE ET DOCUMENTATION
# ============================================================================

.PHONY: help
help: ## Affiche cette aide
	@echo "$(CYAN)========================================$(NC)"
	@echo "$(CYAN)  Exploit Development Framework$(NC)"
	@echo "$(CYAN)  Version: $(VERSION)$(NC)"
	@echo "$(CYAN)========================================$(NC)"
	@echo ""
	@echo "$(YELLOW)Commandes disponibles:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)  %-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Catégories principales:$(NC)"
	@echo "$(GREEN)  setup$(NC)              Configuration initiale"
	@echo "$(GREEN)  exploit$(NC)            Développement d'exploits"
	@echo "$(GREEN)  shellcode$(NC)          Génération de shellcodes"
	@echo "$(GREEN)  rop$(NC)                Chaînes ROP"
	@echo "$(GREEN)  analysis$(NC)           Analyse de vulnérabilités"
	@echo "$(GREEN)  test$(NC)               Tests et validation"
	@echo "$(GREEN)  deploy$(NC)             Déploiement et intégration"

.PHONY: help-exploit
help-exploit: ## Aide pour les commandes d'exploitation
	@echo "$(YELLOW)Commandes d'exploitation:$(NC)"
	@echo "$(GREEN)  exploit-stack$(NC)       Génère un exploit stack overflow"
	@echo "$(GREEN)  exploit-heap$(NC)        Génère un exploit heap overflow"  
	@echo "$(GREEN)  exploit-format$(NC)      Génère un exploit format string"
	@echo "$(GREEN)  exploit-rop$(NC)         Génère un exploit ROP"
	@echo "$(GREEN)  exploit-custom$(NC)      Générateur d'exploit interactif"

.PHONY: help-shellcode
help-shellcode: ## Aide pour les commandes de shellcode
	@echo "$(YELLOW)Commandes de shellcode:$(NC)"
	@echo "$(GREEN)  shellcode-reverse$(NC)   Génère un reverse shell"
	@echo "$(GREEN)  shellcode-bind$(NC)      Génère un bind shell"
	@echo "$(GREEN)  shellcode-execve$(NC)    Génère un shellcode execve"
	@echo "$(GREEN)  shellcode-encode$(NC)    Encode un shellcode"
	@echo "$(GREEN)  shellcode-analyze$(NC)   Analyse un shellcode"

# ============================================================================
# INSTALLATION ET CONFIGURATION
# ============================================================================

.PHONY: setup
setup: install-deps create-dirs install-tools configure ## Installation complète
	@echo "$(GREEN)✓ Setup completed successfully$(NC)"

.PHONY: install-deps
install-deps: ## Installe les dépendances Python
	@echo "$(YELLOW)Installing Python dependencies...$(NC)"
	$(PIP) install -r requirements.txt
	$(PIP) install pwntools keystone-engine capstone-engine
	$(PIP) install ropper ropgadget
	$(PIP) install frida-tools unicorn-engine
	@echo "$(GREEN)✓ Dependencies installed$(NC)"

.PHONY: create-dirs
create-dirs: ## Crée la structure des dossiers
	@echo "$(YELLOW)Creating directory structure...$(NC)"
	@mkdir -p $(OUTPUT_DIR) $(REPORTS_DIR) $(BUILDS_DIR) $(LOGS_DIR)
	@mkdir -p $(PAYLOADS_DIR)/{windows,linux,macos,cross-platform}
	@mkdir -p $(VULNS_DIR) $(POCS_DIR) $(TEMPLATES_DIR)
	@mkdir -p $(RESEARCH_DIR)/{vulnerability-analysis,exploit-techniques,defense-evasion}
	@echo "$(GREEN)✓ Directory structure created$(NC)"

.PHONY: install-tools
install-tools: ## Installe les outils d'exploitation
	@echo "$(YELLOW)Installing exploitation tools...$(NC)"
	@# ROPgadget
	@if ! command -v ROPgadget >/dev/null 2>&1; then \
		echo "Installing ROPgadget..."; \
		$(PIP) install ROPgadget; \
	fi
	@# pwntools
	@if ! $(PYTHON) -c "import pwn" 2>/dev/null; then \
		echo "Installing pwntools..."; \
		$(PIP) install pwntools; \
	fi
	@# Radare2 (if not installed)
	@if ! command -v radare2 >/dev/null 2>&1; then \
		echo "Please install radare2 manually"; \
	fi
	@echo "$(GREEN)✓ Tools installed$(NC)"

.PHONY: configure
configure: ## Configure l'environnement
	@echo "$(YELLOW)Configuring environment...$(NC)"
	@# Configuration des chemins
	@echo "EXPLOIT_DEV_HOME=$(PROJECT_ROOT)" > .env
	@echo "EXPLOIT_DEV_VERSION=$(VERSION)" >> .env
	@# Configuration Git hooks
	@if [ -d .git ]; then \
		cp scripts/pre-commit .git/hooks/ 2>/dev/null || true; \
		chmod +x .git/hooks/pre-commit 2>/dev/null || true; \
	fi
	@echo "$(GREEN)✓ Environment configured$(NC)"

# ============================================================================
# DÉVELOPPEMENT D'EXPLOITS
# ============================================================================

.PHONY: exploit-stack
exploit-stack: ## Génère un exploit stack overflow
	@echo "$(YELLOW)Generating stack overflow exploit...$(NC)"
	@read -p "Target binary path: " binary; \
	read -p "Offset: " offset; \
	read -p "Architecture (x86/x64): " arch; \
	$(PYTHON) $(SRC_DIR)/exploitcraft.py --type stack_overflow \
		--binary "$$binary" --offset "$$offset" --arch "$$arch" \
		--output $(BUILDS_DIR)/stack_exploit.py
	@echo "$(GREEN)✓ Stack overflow exploit generated$(NC)"

.PHONY: exploit-heap
exploit-heap: ## Génère un exploit heap overflow
	@echo "$(YELLOW)Generating heap overflow exploit...$(NC)"
	@read -p "Target binary path: " binary; \
	read -p "Vulnerability type (uaf/double_free): " vuln_type; \
	$(PYTHON) $(SRC_DIR)/exploitcraft.py --type heap_overflow \
		--binary "$$binary" --vuln-type "$$vuln_type" \
		--output $(BUILDS_DIR)/heap_exploit.py
	@echo "$(GREEN)✓ Heap overflow exploit generated$(NC)"

.PHONY: exploit-format
exploit-format: ## Génère un exploit format string
	@echo "$(YELLOW)Generating format string exploit...$(NC)"
	@read -p "Target binary path: " binary; \
	read -p "Format string offset: " offset; \
	$(PYTHON) $(SRC_DIR)/exploitcraft.py --type format_string \
		--binary "$$binary" --offset "$$offset" \
		--output $(BUILDS_DIR)/format_exploit.py
	@echo "$(GREEN)✓ Format string exploit generated$(NC)"

.PHONY: exploit-rop
exploit-rop: ## Génère un exploit ROP
	@echo "$(YELLOW)Generating ROP exploit...$(NC)"
	@read -p "Target binary path: " binary; \
	read -p "Function to call: " function; \
	$(PYTHON) $(SRC_DIR)/ropmaster.py --binary "$$binary" \
		--function "$$function" --output $(BUILDS_DIR)/rop_exploit.py
	@echo "$(GREEN)✓ ROP exploit generated$(NC)"

.PHONY: exploit-custom
exploit-custom: ## Générateur d'exploit interactif
	@echo "$(YELLOW)Interactive exploit generator...$(NC)"
	$(PYTHON) $(TOOLS_DIR)/interactive_generator.py

.PHONY: exploit-test
exploit-test: ## Teste un exploit généré
	@echo "$(YELLOW)Testing exploit...$(NC)"
	@read -p "Exploit file path: " exploit; \
	read -p "Target host (default: localhost): " host; \
	read -p "Target port (default: 9999): " port; \
	host=$${host:-localhost}; \
	port=$${port:-9999}; \
	$(PYTHON) "$$exploit" --test --host "$$host" --port "$$port"

# ============================================================================
# GÉNÉRATION DE SHELLCODES
# ============================================================================

.PHONY: shellcode-reverse
shellcode-reverse: ## Génère un reverse shell shellcode
	@echo "$(YELLOW)Generating reverse shell shellcode...$(NC)"
	@read -p "Host IP: " host; \
	read -p "Port: " port; \
	read -p "Architecture (x86/x64/arm): " arch; \
	read -p "Platform (windows/linux/macos): " platform; \
	$(PYTHON) $(SRC_DIR)/shellforge.py --type reverse_shell \
		--host "$$host" --port "$$port" --arch "$$arch" --platform "$$platform" \
		--output $(PAYLOADS_DIR)/reverse_shell.bin
	@echo "$(GREEN)✓ Reverse shell shellcode generated$(NC)"

.PHONY: shellcode-bind
shellcode-bind: ## Génère un bind shell shellcode
	@echo "$(YELLOW)Generating bind shell shellcode...$(NC)"
	@read -p "Port: " port; \
	read -p "Architecture (x86/x64/arm): " arch; \
	read -p "Platform (windows/linux/macos): " platform; \
	$(PYTHON) $(SRC_DIR)/shellforge.py --type bind_shell \
		--port "$$port" --arch "$$arch" --platform "$$platform" \
		--output $(PAYLOADS_DIR)/bind_shell.bin
	@echo "$(GREEN)✓ Bind shell shellcode generated$(NC)"

.PHONY: shellcode-execve
shellcode-execve: ## Génère un shellcode execve
	@echo "$(YELLOW)Generating execve shellcode...$(NC)"
	@read -p "Command to execute: " cmd; \
	read -p "Architecture (x86/x64/arm): " arch; \
	read -p "Platform (windows/linux/macos): " platform; \
	$(PYTHON) $(SRC_DIR)/shellforge.py --type execve \
		--command "$$cmd" --arch "$$arch" --platform "$$platform" \
		--output $(PAYLOADS_DIR)/execve.bin
	@echo "$(GREEN)✓ Execve shellcode generated$(NC)"

.PHONY: shellcode-encode
shellcode-encode: ## Encode un shellcode
	@echo "$(YELLOW)Encoding shellcode...$(NC)"
	@read -p "Shellcode file path: " shellcode_file; \
	read -p "Encoding type (xor/xor_poly/alpha/unicode): " encoding; \
	read -p "Iterations (for polymorphic): " iterations; \
	$(PYTHON) $(SRC_DIR)/shellforge.py --encode \
		--input "$$shellcode_file" --encoding "$$encoding" \
		--iterations "$${iterations:-1}" \
		--output $(PAYLOADS_DIR)/encoded_shellcode.bin
	@echo "$(GREEN)✓ Shellcode encoded$(NC)"

.PHONY: shellcode-analyze
shellcode-analyze: ## Analyse un shellcode
	@echo "$(YELLOW)Analyzing shellcode...$(NC)"
	@read -p "Shellcode file path: " shellcode_file; \
	$(PYTHON) $(SRC_DIR)/shellforge.py --analyze \
		--input "$$shellcode_file" \
		--output $(REPORTS_DIR)/shellcode_analysis.json
	@echo "$(GREEN)✓ Shellcode analysis completed$(NC)"

# ============================================================================
# CHAÎNES ROP
# ============================================================================

.PHONY: rop-find
rop-find: ## Recherche des gadgets ROP
	@echo "$(YELLOW)Finding ROP gadgets...$(NC)"
	@read -p "Binary path: " binary; \
	read -p "Architecture (x86/x64/arm): " arch; \
	$(PYTHON) $(SRC_DIR)/ropmaster.py --find-gadgets \
		--binary "$$binary" --arch "$$arch" \
		--output $(REPORTS_DIR)/rop_gadgets.json
	@echo "$(GREEN)✓ ROP gadgets found$(NC)"

.PHONY: rop-chain
rop-chain: ## Génère une chaîne ROP
	@echo "$(YELLOW)Building ROP chain...$(NC)"
	@read -p "Binary path: " binary; \
	read -p "Function to call: " function; \
	read -p "Arguments (comma-separated): " args; \
	$(PYTHON) $(SRC_DIR)/ropmaster.py --build-chain \
		--binary "$$binary" --function "$$function" --args "$$args" \
		--output $(BUILDS_DIR)/rop_chain.bin
	@echo "$(GREEN)✓ ROP chain built$(NC)"

.PHONY: rop-optimize
rop-optimize: ## Optimise une chaîne ROP
	@echo "$(YELLOW)Optimizing ROP chain...$(NC)"
	@read -p "ROP chain file: " chain_file; \
	$(PYTHON) $(SRC_DIR)/ropmaster.py --optimize \
		--input "$$chain_file" \
		--output $(BUILDS_DIR)/optimized_rop_chain.bin
	@echo "$(GREEN)✓ ROP chain optimized$(NC)"

# ============================================================================
# ANALYSE DE VULNÉRABILITÉS
# ============================================================================

.PHONY: vuln-scan
vuln-scan: ## Scanne un binaire pour des vulnérabilités
	@echo "$(YELLOW)Scanning for vulnerabilities...$(NC)"
	@read -p "Binary path: " binary; \
	$(PYTHON) $(TOOLS_DIR)/vuln_scanner.py \
		--binary "$$binary" \
		--output $(REPORTS_DIR)/vuln_scan.json
	@echo "$(GREEN)✓ Vulnerability scan completed$(NC)"

.PHONY: vuln-analyze
vuln-analyze: ## Analyse détaillée d'une vulnérabilité
	@echo "$(YELLOW)Analyzing vulnerability...$(NC)"
	@read -p "Vulnerability report file: " vuln_file; \
	$(PYTHON) $(TOOLS_DIR)/vuln_analyzer.py \
		--input "$$vuln_file" \
		--output $(REPORTS_DIR)/detailed_analysis.json
	@echo "$(GREEN)✓ Vulnerability analysis completed$(NC)"

.PHONY: fuzz-test
fuzz-test: ## Lance un test de fuzzing
	@echo "$(YELLOW)Starting fuzzing test...$(NC)"
	@read -p "Target binary: " binary; \
	read -p "Input template: " template; \
	read -p "Duration (minutes): " duration; \
	$(PYTHON) $(TOOLS_DIR)/fuzzer.py \
		--binary "$$binary" --template "$$template" \
		--duration "$${duration:-10}" \
		--output $(LOGS_DIR)/fuzzing_results.log
	@echo "$(GREEN)✓ Fuzzing test completed$(NC)"

# ============================================================================
# APPLICATIONS VULNÉRABLES
# ============================================================================

.PHONY: build-vulns
build-vulns: ## Compile les applications vulnérables
	@echo "$(YELLOW)Building vulnerable applications...$(NC)"
	@for arch in $(ARCHS); do \
		echo "Building for $$arch..."; \
		gcc -m64 -fno-stack-protector -z execstack -no-pie \
			$(VULNS_DIR)/stack_overflow.c -o $(VULNS_DIR)/stack_overflow_x64 2>/dev/null || true; \
		gcc -m32 -fno-stack-protector -z execstack -no-pie \
			$(VULNS_DIR)/stack_overflow.c -o $(VULNS_DIR)/stack_overflow_x86 2>/dev/null || true; \
	done
	@echo "$(GREEN)✓ Vulnerable applications built$(NC)"

.PHONY: create-vuln
create-vuln: ## Crée une nouvelle application vulnérable
	@echo "$(YELLOW)Creating vulnerable application...$(NC)"
	@read -p "Vulnerability type (stack/heap/format): " vuln_type; \
	read -p "Application name: " app_name; \
	$(PYTHON) $(TOOLS_DIR)/vuln_generator.py \
		--type "$$vuln_type" --name "$$app_name" \
		--output $(VULNS_DIR)/"$$app_name".c
	@echo "$(GREEN)✓ Vulnerable application template created$(NC)"

# ============================================================================
# TESTS ET VALIDATION
# ============================================================================

.PHONY: test
test: test-unit test-integration test-exploits ## Lance tous les tests

.PHONY: test-unit
test-unit: ## Tests unitaires
	@echo "$(YELLOW)Running unit tests...$(NC)"
	$(PYTHON) -m pytest $(TESTS_DIR)/unit-tests/ -v \
		--tb=short --color=yes
	@echo "$(GREEN)✓ Unit tests completed$(NC)"

.PHONY: test-integration
test-integration: ## Tests d'intégration
	@echo "$(YELLOW)Running integration tests...$(NC)"
	$(PYTHON) -m pytest $(TESTS_DIR)/integration-tests/ -v \
		--tb=short --color=yes
	@echo "$(GREEN)✓ Integration tests completed$(NC)"

.PHONY: test-exploits
test-exploits: ## Tests des exploits
	@echo "$(YELLOW)Testing exploits...$(NC)"
	$(PYTHON) -m pytest $(TESTS_DIR)/exploit-validation/ -v \
		--tb=short --color=yes
	@echo "$(GREEN)✓ Exploit tests completed$(NC)"

.PHONY: validate-payload
validate-payload: ## Valide un payload
	@echo "$(YELLOW)Validating payload...$(NC)"
	@read -p "Payload file: " payload_file; \
	$(PYTHON) $(TOOLS_DIR)/payload_validator.py \
		--input "$$payload_file" \
		--output $(REPORTS_DIR)/payload_validation.json
	@echo "$(GREEN)✓ Payload validation completed$(NC)"

# ============================================================================
# INTÉGRATION METASPLOIT
# ============================================================================

.PHONY: msf-generate
msf-generate: ## Génère un module Metasploit
	@echo "$(YELLOW)Generating Metasploit module...$(NC)"
	@read -p "Exploit file: " exploit_file; \
	read -p "Module name: " module_name; \
	$(PYTHON) $(TOOLS_DIR)/msf_generator.py \
		--exploit "$$exploit_file" --name "$$module_name" \
		--output $(BUILDS_DIR)/"$$module_name".rb
	@echo "$(GREEN)✓ Metasploit module generated$(NC)"

.PHONY: msf-install
msf-install: ## Installe un module dans Metasploit
	@echo "$(YELLOW)Installing Metasploit module...$(NC)"
	@read -p "Module file (.rb): " module_file; \
	cp "$$module_file" $(METASPLOIT_PATH)/modules/exploits/custom/ 2>/dev/null || \
		echo "$(RED)Error: Could not copy module to Metasploit directory$(NC)"
	@echo "$(GREEN)✓ Module installed in Metasploit$(NC)"

.PHONY: msf-test
msf-test: ## Teste un module Metasploit
	@echo "$(YELLOW)Testing Metasploit module...$(NC)"
	@read -p "Module path: " module_path; \
	msfconsole -x "use $$module_path; show options; exit" || \
		echo "$(RED)Error: Metasploit not available$(NC)"

# ============================================================================
# RAPPORTS ET DOCUMENTATION
# ============================================================================

.PHONY: report-generate
report-generate: ## Génère un rapport d'exploitation
	@echo "$(YELLOW)Generating exploitation report...$(NC)"
	@read -p "Campaign name: " campaign; \
	$(PYTHON) $(TOOLS_DIR)/report_generator.py \
		--campaign "$$campaign" \
		--template $(TEMPLATES_DIR)/exploit_report.html \
		--output $(REPORTS_DIR)/"$$campaign"_report.html
	@echo "$(GREEN)✓ Exploitation report generated$(NC)"

.PHONY: poc-create
poc-create: ## Crée un Proof of Concept
	@echo "$(YELLOW)Creating Proof of Concept...$(NC)"
	@read -p "Vulnerability name: " vuln_name; \
	read -p "CVE ID (optional): " cve_id; \
	$(PYTHON) $(TOOLS_DIR)/poc_generator.py \
		--vuln "$$vuln_name" --cve "$$cve_id" \
		--output $(POCS_DIR)/"$$vuln_name"_poc.py
	@echo "$(GREEN)✓ Proof of Concept created$(NC)"

.PHONY: docs-build
docs-build: ## Génère la documentation
	@echo "$(YELLOW)Building documentation...$(NC)"
	@if command -v sphinx-build >/dev/null 2>&1; then \
		sphinx-build -b html $(DOCS_DIR)/source $(DOCS_DIR)/build/html; \
	else \
		echo "$(RED)Sphinx not installed. Installing...$(NC)"; \
		$(PIP) install sphinx sphinx-rtd-theme; \
		sphinx-build -b html $(DOCS_DIR)/source $(DOCS_DIR)/build/html; \
	fi
	@echo "$(GREEN)✓ Documentation built$(NC)"

# ============================================================================
# NETTOYAGE ET MAINTENANCE
# ============================================================================

.PHONY: clean
clean: ## Nettoie les fichiers temporaires
	@echo "$(YELLOW)Cleaning temporary files...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.log" -delete
	@find . -type f -name ".DS_Store" -delete
	@rm -rf $(OUTPUT_DIR)/temp/* 2>/dev/null || true
	@echo "$(GREEN)✓ Cleanup completed$(NC)"

.PHONY: clean-all
clean-all: clean ## Nettoie tout (builds, rapports, logs)
	@echo "$(YELLOW)Cleaning all generated files...$(NC)"
	@rm -rf $(BUILDS_DIR)/*
	@rm -rf $(REPORTS_DIR)/*
	@rm -rf $(LOGS_DIR)/*
	@echo "$(GREEN)✓ Deep cleanup completed$(NC)"

.PHONY: backup
backup: ## Sauvegarde du projet
	@echo "$(YELLOW)Creating project backup...$(NC)"
	@timestamp=$$(date +"%Y%m%d_%H%M%S"); \
	tar -czf "../$(PROJECT_NAME)_backup_$$timestamp.tar.gz" \
		--exclude='.git' --exclude='output' --exclude='*.pyc' \
		--exclude='__pycache__' .
	@echo "$(GREEN)✓ Backup created$(NC)"

# ============================================================================
# DÉVELOPPEMENT ET DEBUG
# ============================================================================

.PHONY: debug-exploit
debug-exploit: ## Debug un exploit avec GDB
	@echo "$(YELLOW)Debugging exploit with GDB...$(NC)"
	@read -p "Exploit file: " exploit_file; \
	read -p "Target binary: " target_binary; \
	gdb -ex "set confirm off" \
		-ex "file $$target_binary" \
		-ex "run < <($(PYTHON) $$exploit_file)" \
		-ex "bt" -ex "quit" || \
		echo "$(RED)GDB not available$(NC)"

.PHONY: analyze-binary
analyze-binary: ## Analyse un binaire avec radare2
	@echo "$(YELLOW)Analyzing binary with radare2...$(NC)"
	@read -p "Binary path: " binary; \
	radare2 -A -c "pdf @ main; quit" "$$binary" || \
		echo "$(RED)radare2 not available$(NC)"

.PHONY: disassemble
disassemble: ## Désassemble un binaire
	@echo "$(YELLOW)Disassembling binary...$(NC)"
	@read -p "Binary path: " binary; \
	read -p "Function name (default: main): " function; \
	function=$${function:-main}; \
	objdump -d "$$binary" | grep -A 20 "<$$function>:" || \
		echo "$(RED)objdump failed$(NC)"

# ============================================================================
# OUTILS DE SÉCURITÉ
# ============================================================================

.PHONY: check-security
check-security: ## Vérifie les protections d'un binaire
	@echo "$(YELLOW)Checking binary security features...$(NC)"
	@read -p "Binary path: " binary; \
	if command -v checksec >/dev/null 2>&1; then \
		checksec --file="$$binary"; \
	else \
		$(PYTHON) $(TOOLS_DIR)/security_checker.py --binary "$$binary"; \
	fi

.PHONY: aslr-test
aslr-test: ## Teste le contournement d'ASLR
	@echo "$(YELLOW)Testing ASLR bypass...$(NC)"
	@read -p "Binary path: " binary; \
	$(PYTHON) $(TOOLS_DIR)/aslr_tester.py --binary "$$binary" \
		--output $(REPORTS_DIR)/aslr_test.json

.PHONY: dep-test
dep-test: ## Teste le contournement de DEP
	@echo "$(YELLOW)Testing DEP bypass...$(NC)"
	@read -p "Binary path: " binary; \
	$(PYTHON) $(TOOLS_DIR)/dep_tester.py --binary "$$binary" \
		--output $(REPORTS_DIR)/dep_test.json

# ============================================================================
# CIBLES PAR DÉFAUT
# ============================================================================

.DEFAULT_GOAL := help

# Variables d'environnement
export EXPLOIT_DEV_HOME := $(PROJECT_ROOT)
export PYTHONPATH := $(SRC_DIR):$(PYTHONPATH)

# ============================================================================
# FINALISATION
# ============================================================================

.PHONY: version
version: ## Affiche la version
	@echo "$(CYAN)Exploit Development Framework v$(VERSION)$(NC)"

.PHONY: status
status: ## Affiche le statut du projet
	@echo "$(CYAN)========================================$(NC)"
	@echo "$(CYAN)  Project Status$(NC)"
	@echo "$(CYAN)========================================$(NC)"
	@echo "$(YELLOW)Project:$(NC) $(PROJECT_NAME)"
	@echo "$(YELLOW)Version:$(NC) $(VERSION)"
	@echo "$(YELLOW)Python:$(NC) $$($(PYTHON) --version 2>&1)"
	@echo "$(YELLOW)Tools:$(NC)"
	@echo "  - ROPgadget: $$(command -v ROPgadget >/dev/null 2>&1 && echo '✓' || echo '✗')"
	@echo "  - radare2: $$(command -v radare2 >/dev/null 2>&1 && echo '✓' || echo '✗')"
	@echo "  - gdb: $$(command -v gdb >/dev/null 2>&1 && echo '✓' || echo '✗')"
	@echo "$(YELLOW)Directories:$(NC)"
	@echo "  - Source: $(SRC_DIR)"
	@echo "  - Output: $(OUTPUT_DIR)"
	@echo "  - Reports: $(REPORTS_DIR)"

# Fin du Makefile