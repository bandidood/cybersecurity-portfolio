# TheHive Configuration for SOC SOAR Platform
# Advanced security orchestration and case management
# Author: SOC Team
# Version: 1.0.0

# Global configuration
application {
  # Application secret key for security
  secret = "soc-thehive-secret-key-change-in-production"
  
  # Database configuration
  database {
    provider = cassandra
    
    cassandra {
      cluster-name = "thehive"
      keyspace = "thehive"
      hostname = ["soc-thehive-db"]
      port = 9042
      username = ""
      password = ""
      
      # Advanced settings
      max-connections-per-host = 32
      max-requests-per-connection = 128
      connect-timeout = 5000
      read-timeout = 60000
      
      # Retry policy
      retry-policy {
        max-retries = 3
        delay = 1000
      }
    }
  }
  
  # File storage configuration
  storage {
    provider = localfs
    localfs {
      location = /opt/thehive/data/files
    }
  }
  
  # Index configuration (for search)
  index {
    provider = elasticsearch
    
    elasticsearch {
      hosts = ["http://elasticsearch:9200"]
      cluster-name = "soc-cluster"
      index = "thehive"
      
      # Sharding configuration
      settings {
        number-of-shards = 5
        number-of-replicas = 1
        max-nested-fields = 100
      }
      
      # Index templates
      templates {
        case_template = "thehive_case_*"
        alert_template = "thehive_alert_*"
        audit_template = "thehive_audit_*"
      }
    }
  }
}

# Authentication configuration
auth {
  # Multi-factor authentication
  multifactor = false
  
  # Session configuration
  session {
    warning = 5 minutes
    inactivity = 1 hour
  }
  
  # Authentication providers
  providers = [
    {
      name = local
      type = local
    },
    {
      name = ldap
      type = ldap
      host = "ldap.soc.local"
      port = 389
      use-ssl = false
      bind-dn = "cn=thehive,ou=services,dc=soc,dc=local"
      bind-pw = "ldap-password"
      base-dn = "ou=users,dc=soc,dc=local"
      filter = "(&(objectClass=person)(uid={0}))"
      
      # Attribute mapping
      mapping {
        login = "uid"
        name = "cn"
        groups = "memberOf"
        organization = "o"
      }
    },
    {
      name = oauth2
      type = oauth2
      clientId = "thehive-oauth-client"
      clientSecret = "oauth-client-secret"
      redirectUri = "https://thehive.soc.local/api/ssoLogin"
      responseType = "code"
      grantType = "authorization_code"
      authorizationUrl = "https://auth.soc.local/oauth/authorize"
      tokenUrl = "https://auth.soc.local/oauth/token"
      userUrl = "https://auth.soc.local/api/user"
      scope = ["read:user", "read:org"]
      
      # User information mapping
      userMapping {
        login = "login"
        name = "name"
        groups = "groups"
        organization = "organization"
      }
    }
  ]
}

# HTTP server configuration
http {
  address = 0.0.0.0
  port = 9000
  
  # HTTPS configuration
  https {
    port = 9443
    keyStore {
      path = "/opt/thehive/conf/keystore.jks"
      type = "JKS"
      password = "thehive-keystore-password"
    }
  }
  
  # CORS configuration
  cors {
    enabled = true
    allowed-origins = ["https://soc-dashboard.local", "https://kibana.soc.local"]
    allowed-methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
    allowed-headers = ["Content-Type", "Authorization", "X-Requested-With"]
    exposed-headers = ["X-Total-Count", "X-Page-Count"]
    credentials = true
    max-age = 1728000
  }
}

# Cortex integration (analyzers and responders)
cortex {
  servers = [
    {
      name = "soc-cortex"
      url = "http://cortex:9001"
      auth {
        type = "bearer"
        key = "cortex-api-key-here"
      }
      
      # SSL configuration
      ssl {
        trustAll = false
        trustStore {
          path = "/opt/thehive/conf/cortex-truststore.jks"
          password = "cortex-truststore-password"
        }
      }
      
      # HTTP client settings
      http {
        proxy {
          host = ""
          port = 0
        }
        timeout {
          connection = 10 seconds
          idle = 60 seconds
          request = 5 minutes
        }
      }
      
      # Rate limiting
      rateLimit {
        enabled = true
        points = 1000
        duration = 1 minute
      }
      
      # Include/exclude analyzers and responders
      includedTheHiveOrganisations = ["*"]
      excludedTheHiveOrganisations = []
    }
  ]
  
  # Job timeout settings
  job {
    timeout = 30 minutes
    
    # Retry configuration
    retry {
      max-attempts = 3
      delay = 30 seconds
    }
  }
  
  # Cache configuration for cortex responses
  cache {
    job = 10 minutes
    artifact = 1 hour
  }
}

# MISP integration
misp {
  servers = [
    {
      name = "soc-misp"
      url = "http://misp:80"
      auth {
        type = "key"
        key = "misp-api-key-here"
      }
      
      # MISP specific settings
      verifyCert = false
      tags = ["thehive", "soc-automated"]
      max-attributes = 1000
      max-size = 1 MB
      
      # Filtering configuration
      filters {
        # Only import events with these tags
        tags = ["thehive-import", "apt", "malware"]
        
        # Exclude events with these tags
        excludeTags = ["false-positive", "test"]
        
        # Minimum threat level
        threatLevel = 3
        
        # Published events only
        published = true
        
        # Date range filtering
        dateRange = 30 days
      }
      
      # Synchronization settings
      sync {
        enabled = true
        interval = 1 hour
        batchSize = 100
        
        # Auto-create cases from MISP events
        autoImport = true
        caseTemplate = "misp-event-case"
        severity = 2
        tlp = 2
      }
      
      # Webhook configuration
      webhook {
        name = "thehive-webhook"
        url = "https://thehive.soc.local/api/misp/webhook"
        enabled = true
      }
    }
  ]
}

# Notification configuration
notification {
  # Email notifications
  email {
    enabled = true
    from = "thehive@soc.local"
    
    # SMTP configuration
    smtp {
      host = "smtp.soc.local"
      port = 587
      user = "thehive-notifications"
      password = "smtp-password"
      auth = true
      tls = true
      ssl = false
    }
    
    # Email templates
    templates {
      case-created = "/opt/thehive/conf/templates/case-created.html"
      case-updated = "/opt/thehive/conf/templates/case-updated.html"
      alert-created = "/opt/thehive/conf/templates/alert-created.html"
      task-assigned = "/opt/thehive/conf/templates/task-assigned.html"
    }
  }
  
  # Slack notifications
  slack {
    enabled = true
    webhook-url = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel = "#soc-alerts"
    username = "TheHive"
    
    # Notification triggers
    triggers = [
      "case-created",
      "case-severity-high",
      "case-severity-critical",
      "alert-created",
      "cortex-job-failure"
    ]
  }
  
  # Webhook notifications
  webhook {
    enabled = true
    endpoints = [
      {
        name = "soc-dashboard"
        url = "https://soc-dashboard.local/api/webhooks/thehive"
        secret = "webhook-secret-key"
        events = ["case-created", "case-updated", "alert-created"]
        retry = true
        max-retries = 3
      },
      {
        name = "elasticsearch-logs"
        url = "http://elasticsearch:9200/thehive-notifications/_doc"
        events = ["*"]
        headers = {
          "Content-Type" = "application/json"
        }
      }
    ]
  }
  
  # Teams integration
  teams {
    enabled = true
    webhook-url = "https://outlook.office.com/webhook/YOUR-TEAMS-WEBHOOK"
    
    # Message formatting
    format {
      title-template = "ðŸš¨ {{eventType}}: {{case.title}}"
      summary-template = "{{case.description | truncate:200}}"
      color-mapping = {
        "case-created" = "good"
        "case-severity-high" = "warning"
        "case-severity-critical" = "attention"
      }
    }
  }
}

# Case management configuration
case {
  # Auto-assignment rules
  assignment {
    enabled = true
    rules = [
      {
        condition = "severity >= 3"
        assignTo = "senior-analyst"
      },
      {
        condition = "tags contains 'malware'"
        assignTo = "malware-specialist"
      },
      {
        condition = "source == 'misp'"
        assignTo = "threat-intel-team"
      }
    ]
    
    # Load balancing
    loadBalancing {
      enabled = true
      strategy = "round-robin" # round-robin, least-cases, random
    }
  }
  
  # SLA configuration
  sla {
    enabled = true
    rules = [
      {
        severity = 4
        response-time = 15 minutes
        resolution-time = 4 hours
      },
      {
        severity = 3
        response-time = 1 hour
        resolution-time = 24 hours
      },
      {
        severity = 2
        response-time = 4 hours
        resolution-time = 72 hours
      },
      {
        severity = 1
        response-time = 24 hours
        resolution-time = 168 hours
      }
    ]
    
    # SLA breach notifications
    notifications {
      warning-threshold = 75% # Warn at 75% of SLA time
      escalation-levels = [
        {
          threshold = 100%
          notify = ["soc-manager"]
        },
        {
          threshold = 150%
          notify = ["soc-manager", "ciso"]
        }
      ]
    }
  }
  
  # Case templates
  templates = [
    {
      name = "incident-response"
      title-template = "IR-{{date:yyyyMMdd}}-{{sequence:000}}"
      description = "Standard incident response case"
      severity = 2
      tlp = 2
      tags = ["incident-response"]
      tasks = [
        {
          title = "Initial Assessment"
          group = "analysis"
          description = "Perform initial threat assessment and containment evaluation"
        },
        {
          title = "Containment"
          group = "response"
          description = "Implement containment measures to prevent spread"
        },
        {
          title = "Evidence Collection"
          group = "forensics"
          description = "Collect and preserve digital evidence"
        },
        {
          title = "Analysis"
          group = "analysis"
          description = "Detailed analysis of the incident"
        },
        {
          title = "Eradication"
          group = "response"
          description = "Remove threat from environment"
        },
        {
          title = "Recovery"
          group = "response"
          description = "Restore systems and services"
        },
        {
          title = "Lessons Learned"
          group = "documentation"
          description = "Document lessons learned and update procedures"
        }
      ]
    },
    {
      name = "malware-analysis"
      title-template = "MALWARE-{{date:yyyyMMdd}}-{{sequence:000}}"
      description = "Malware analysis case template"
      severity = 2
      tlp = 2
      tags = ["malware", "analysis"]
      tasks = [
        {
          title = "Static Analysis"
          group = "analysis"
          description = "Perform static analysis of the malware sample"
        },
        {
          title = "Dynamic Analysis"
          group = "analysis"
          description = "Execute malware in controlled environment"
        },
        {
          title = "IoC Extraction"
          group = "intelligence"
          description = "Extract indicators of compromise"
        },
        {
          title = "Attribution Research"
          group = "intelligence"
          description = "Research potential attribution and TTPs"
        },
        {
          title = "Report Generation"
          group = "documentation"
          description = "Generate analysis report with findings"
        }
      ]
    }
  ]
  
  # Auto-close configuration
  autoClose {
    enabled = true
    inactivityPeriod = 30 days
    
    # Conditions for auto-close
    conditions = [
      "status == 'resolved'",
      "lastActivity > 30 days",
      "severity <= 2"
    ]
    
    # Notification before auto-close
    warning {
      enabled = true
      period = 7 days
      template = "case-auto-close-warning"
    }
  }
}

# Alert management configuration
alert {
  # Auto-promotion to cases
  promotion {
    enabled = true
    rules = [
      {
        condition = "severity >= 3"
        template = "incident-response"
        autoPromote = true
      },
      {
        condition = "type == 'malware'"
        template = "malware-analysis"
        autoPromote = true
      },
      {
        condition = "source == 'SIEM' AND tags contains 'high-confidence'"
        template = "incident-response"
        autoPromote = true
      }
    ]
  }
  
  # Deduplication
  deduplication {
    enabled = true
    timeWindow = 24 hours
    
    # Similarity criteria
    criteria = [
      "source",
      "type", 
      "artifacts.ip",
      "artifacts.domain",
      "artifacts.hash"
    ]
    
    # Similarity threshold (0.0 - 1.0)
    threshold = 0.8
  }
  
  # Alert aging
  aging {
    enabled = true
    periods = [
      {
        age = 7 days
        action = "lower-severity"
      },
      {
        age = 30 days
        action = "auto-close"
        condition = "severity <= 2"
      }
    ]
  }
}

# Audit configuration
audit {
  enabled = true
  
  # Storage configuration
  storage {
    provider = elasticsearch
    index = "thehive-audit"
    
    # Retention policy
    retention = 1 year
    
    # Index rotation
    rotation {
      policy = "monthly"
      template = "thehive-audit-{yyyy-MM}"
    }
  }
  
  # Events to audit
  events = [
    "login",
    "logout", 
    "case-created",
    "case-updated",
    "case-deleted",
    "alert-created",
    "alert-promoted",
    "task-completed",
    "artifact-added",
    "user-created",
    "user-updated",
    "organization-updated",
    "cortex-job-started",
    "cortex-job-completed"
  ]
  
  # Sensitive field masking
  masking {
    enabled = true
    fields = ["password", "apikey", "token", "secret"]
    replacement = "***MASKED***"
  }
}

# Performance and monitoring
monitoring {
  # JVM metrics
  jvm {
    enabled = true
    interval = 30 seconds
  }
  
  # Application metrics
  application {
    enabled = true
    metrics = [
      "case-creation-rate",
      "alert-processing-time",
      "user-activity",
      "cortex-job-success-rate",
      "database-response-time"
    ]
  }
  
  # Health checks
  healthCheck {
    enabled = true
    checks = [
      "database",
      "elasticsearch",
      "cortex-connectivity",
      "misp-connectivity",
      "storage-access"
    ]
    
    # Health check intervals
    interval = 60 seconds
    timeout = 30 seconds
  }
  
  # Performance monitoring
  performance {
    # Slow query detection
    slowQueries {
      enabled = true
      threshold = 5 seconds
      logQueries = true
    }
    
    # Memory monitoring
    memory {
      warningThreshold = 80%
      criticalThreshold = 95%
    }
    
    # Response time monitoring
    responseTime {
      targets = {
        "p50" = 200ms
        "p95" = 1000ms
        "p99" = 5000ms
      }
    }
  }
}

# Feature flags
features {
  # Experimental features
  experimental {
    # AI-powered case classification
    aiClassification = false
    
    # Advanced analytics
    advancedAnalytics = true
    
    # Threat hunting integration
    threatHunting = true
    
    # Mobile application support
    mobileApp = false
  }
  
  # Beta features
  beta {
    # Enhanced workflow engine
    workflowEngine = true
    
    # Advanced reporting
    advancedReporting = true
    
    # Real-time collaboration
    realTimeCollaboration = false
  }
}

# Rate limiting
rateLimit {
  # API rate limits
  api {
    enabled = true
    
    # Per-user limits
    perUser {
      requests = 1000
      window = 1 hour
    }
    
    # Per-IP limits
    perIP {
      requests = 5000
      window = 1 hour
    }
    
    # Global limits
    global {
      requests = 50000
      window = 1 hour
    }
  }
  
  # Login rate limits
  login {
    enabled = true
    maxAttempts = 5
    window = 15 minutes
    lockoutDuration = 30 minutes
  }
}

# Internationalization
i18n {
  # Supported languages
  languages = ["en", "fr", "de", "es", "it"]
  defaultLanguage = "en"
  
  # Date and time formatting
  dateFormat = "yyyy-MM-dd"
  timeFormat = "HH:mm:ss"
  timezone = "UTC"
}

# Custom field definitions
customFields {
  case = [
    {
      name = "business-impact"
      type = "string"
      required = false
      options = ["low", "medium", "high", "critical"]
      description = "Business impact assessment"
    },
    {
      name = "estimated-cost"
      type = "number"
      required = false
      description = "Estimated financial impact in EUR"
    },
    {
      name = "affected-systems"
      type = "multi-string"
      required = false
      description = "List of affected systems and services"
    }
  ]
  
  alert = [
    {
      name = "confidence-score"
      type = "number"
      required = false
      min = 0
      max = 100
      description = "Detection confidence score (0-100)"
    },
    {
      name = "mitre-tactics"
      type = "multi-string"
      required = false
      description = "MITRE ATT&CK tactics associated with this alert"
    }
  ]
}