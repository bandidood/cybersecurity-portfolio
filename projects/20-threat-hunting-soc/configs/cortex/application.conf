# Cortex Configuration for SOC SOAR Platform
# Security analyzers and responders automation
# Author: SOC Team
# Version: 1.0.0

# Global configuration
cortex {
  # Application secret
  secret = "soc-cortex-secret-key-change-in-production"
  
  # HTTP server configuration
  http {
    interface = "0.0.0.0"
    port = 9001
    
    # Request timeout
    timeout = 300000  # 5 minutes
    
    # Max request size (for file uploads)
    max-content-length = 100MB
    
    # CORS configuration
    cors {
      enabled = true
      allowed-origins = ["https://thehive.soc.local", "https://soc-dashboard.local"]
      allowed-methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
      allowed-headers = ["Content-Type", "Authorization", "X-Requested-With"]
      credentials = true
    }
  }
  
  # Authentication configuration
  auth {
    # Multi-authentication support
    multi-auth = true
    
    # Supported authentication methods
    ad {
      # Active Directory authentication
      serverNames = ["ldap.soc.local:389"]
      domainFQDN = "soc.local"
      domainName = "SOC"
      useSSL = false
      bindDN = "cn=cortex,ou=services,dc=soc,dc=local"
      bindPW = "ldap-password"
      baseDN = "ou=users,dc=soc,dc=local"
      filter = "(&(objectClass=person)(sAMAccountName={0}))"
      
      # Attribute mapping
      mapping {
        login = "sAMAccountName"
        name = "displayName"
        groups = "memberOf"
      }
    }
    
    # Local authentication
    local {
      enabled = true
    }
    
    # API key authentication
    key {
      enabled = true
    }
    
    # Bearer token authentication
    bearer {
      enabled = true
    }
    
    # OAuth2 authentication
    oauth2 {
      enabled = true
      clientId = "cortex-oauth-client"
      clientSecret = "oauth-client-secret"
      redirectUri = "https://cortex.soc.local/api/ssoLogin"
      responseType = "code"
      grantType = "authorization_code"
      authorizationUrl = "https://auth.soc.local/oauth/authorize"
      tokenUrl = "https://auth.soc.local/oauth/token"
      userUrl = "https://auth.soc.local/api/user"
      scope = ["read:user"]
      
      userMapping {
        login = "login"
        name = "name"
        groups = "groups"
      }
    }
  }
  
  # Database configuration
  database {
    provider = elasticsearch
    
    elasticsearch {
      # Elasticsearch cluster configuration
      uri = "http://elasticsearch:9200"
      index = "cortex"
      
      # Cluster settings
      cluster-name = "soc-cluster"
      
      # Index settings
      settings {
        number-of-shards = 3
        number-of-replicas = 1
        max-nested-fields = 100
      }
      
      # Authentication for Elasticsearch
      username = ""
      password = ""
      
      # SSL/TLS configuration
      ssl {
        enabled = false
        truststore {
          path = "/opt/cortex/conf/elasticsearch-truststore.jks"
          password = "truststore-password"
        }
      }
      
      # Connection settings
      connection {
        timeout = 10000
        max-connections = 50
        max-connections-per-route = 20
      }
      
      # Index templates
      templates {
        job_template = "cortex_job_*"
        analyzer_template = "cortex_analyzer_*"
        responder_template = "cortex_responder_*"
      }
    }
  }
  
  # Job execution configuration
  job {
    # Runner configuration
    runner = [docker, process]
    
    # Docker configuration
    docker {
      # Docker daemon settings
      uri = "unix:///var/run/docker.sock"
      version = "auto"
      
      # Container settings
      container {
        # Resource limits
        memory = 512m
        cpu = 1.0
        
        # Timeout settings
        timeout = 30 minutes
        idle-timeout = 5 minutes
        
        # Network settings
        network = "bridge"
        add-host = []
        
        # Volume mounts
        volumes = [
          "/tmp/cortex-jobs:/tmp:rw",
          "/opt/cortex/analyzers:/opt/analyzers:ro"
        ]
        
        # Environment variables
        environment = [
          "MAX_JOBS=10",
          "WORKERS=2"
        ]
        
        # Security settings
        user = "cortex"
        capabilities = []
        privileged = false
        
        # Auto-remove containers after execution
        auto-remove = true
        
        # Pull policy
        pull-policy = "missing"  # always, missing, never
      }
      
      # Registry configuration
      registry {
        # Docker Hub
        docker-hub {
          enabled = true
          username = ""
          password = ""
        }
        
        # Private registry
        private {
          enabled = false
          url = "registry.soc.local:5000"
          username = "cortex"
          password = "registry-password"
          verify-ssl = true
        }
      }
    }
    
    # Process runner configuration
    process {
      # Command execution settings
      timeout = 30 minutes
      
      # Working directory
      working-directory = "/tmp/cortex-jobs"
      
      # Environment variables
      environment = {
        PATH = "/usr/local/bin:/usr/bin:/bin"
        PYTHONPATH = "/opt/cortex/analyzers"
      }
      
      # User/group for process execution
      user = "cortex"
      group = "cortex"
    }
    
    # Job queue configuration
    queue {
      # Maximum concurrent jobs
      max-concurrent = 10
      
      # Job priority levels
      priorities = ["low", "medium", "high", "critical"]
      
      # Queue sizes per priority
      queue-sizes {
        critical = 50
        high = 100
        medium = 200
        low = 500
      }
      
      # Timeout for queued jobs
      queue-timeout = 1 hour
    }
    
    # Job retry configuration
    retry {
      max-attempts = 3
      delay = 30 seconds
      backoff-factor = 2.0
      max-delay = 10 minutes
    }
    
    # Job cleanup
    cleanup {
      # Auto-cleanup completed jobs
      auto-cleanup = true
      
      # Retention periods
      retention {
        success = 7 days
        failure = 30 days
        canceled = 3 days
      }
      
      # Cleanup schedule (cron expression)
      schedule = "0 2 * * *"  # Daily at 2 AM
    }
  }
  
  # Cache configuration
  cache {
    # Job result caching
    job {
      enabled = true
      ttl = 1 hour
      max-size = 1000
    }
    
    # Analyzer definition caching
    analyzer {
      enabled = true
      ttl = 24 hours
      refresh-interval = 1 hour
    }
    
    # Responder definition caching
    responder {
      enabled = true
      ttl = 24 hours
      refresh-interval = 1 hour
    }
    
    # Cache backend
    backend = "memory"  # memory, redis
    
    # Redis configuration (if backend = "redis")
    redis {
      uri = "redis://redis:6379"
      database = 0
      password = ""
      
      # Connection pool
      pool {
        max-total = 20
        max-idle = 10
        min-idle = 1
      }
    }
  }
  
  # Analyzer configuration
  analyzers {
    # Analyzer repository paths
    paths = [
      "/opt/cortex/analyzers",
      "/opt/cortex/custom-analyzers"
    ]
    
    # Auto-discovery settings
    auto-discovery {
      enabled = true
      scan-interval = 30 minutes
      
      # Include/exclude patterns
      include-patterns = ["*.json", "*/config.json"]
      exclude-patterns = ["*/.*", "*/.git/*"]
    }
    
    # Default analyzer settings
    defaults {
      # Resource limits
      memory-limit = 512m
      cpu-limit = 1.0
      timeout = 30 minutes
      
      # Rate limiting
      rate-limit {
        enabled = true
        requests = 100
        window = 1 hour
      }
      
      # Proxy settings
      proxy {
        http = ""
        https = ""
        
        # No proxy list
        no-proxy = ["localhost", "127.0.0.1", "*.soc.local"]
      }
    }
    
    # Specific analyzer configurations
    configs = {
      # VirusTotal analyzer
      "VirusTotal_GetReport_3_0" = {
        # API configuration
        key = "virustotal-api-key"
        auto_download = false
        
        # Rate limiting
        rate_limit = 4  # requests per minute
        
        # Polling configuration
        polling_interval = 60  # seconds
        max_polls = 60
      }
      
      # URLVoid analyzer
      "URLVoid_1_0" = {
        key = "urlvoid-api-key"
        
        # Request settings
        timeout = 60
        user_agent = "Cortex-URLVoid-Analyzer"
      }
      
      # Shodan analyzer
      "Shodan_DNSResolve_1_0" = {
        key = "shodan-api-key"
        
        # Query settings
        timeout = 30
        max_records = 100
      }
      
      # PassiveTotal analyzer
      "PassiveTotal_2_0" = {
        key = "passivetotal-api-key"
        username = "passivetotal-username"
        
        # Historical data settings
        days_back = 365
        max_records = 1000
      }
      
      # MaxMind GeoIP analyzer
      "MaxMind_GeoIP_3_0" = {
        # Database paths
        city_db = "/opt/cortex/data/geoip/GeoLite2-City.mmdb"
        country_db = "/opt/cortex/data/geoip/GeoLite2-Country.mmdb"
        asn_db = "/opt/cortex/data/geoip/GeoLite2-ASN.mmdb"
      }
      
      # YARA analyzer
      "Yara_2_0" = {
        # Rules directory
        rules_path = "/opt/cortex/data/yara-rules"
        
        # Scanning settings
        max_file_size = 100MB
        timeout = 300
        
        # Rule compilation
        compile_rules = true
        externals = {}
      }
      
      # File_Info analyzer
      "File_Info_8_0" = {
        # Analysis depth
        enable_hashing = true
        hash_algorithms = ["md5", "sha1", "sha256", "sha512"]
        
        # Magic number detection
        enable_magic = true
        magic_db = "/usr/share/misc/magic.mgc"
        
        # Metadata extraction
        enable_metadata = true
        max_metadata_size = 1MB
      }
      
      # MISP analyzer
      "MISP_2_1" = {
        url = "http://misp:80"
        key = "misp-api-key"
        
        # SSL settings
        verify_ssl = false
        
        # Query settings
        max_attributes = 1000
        timeout = 60
        
        # Filtering
        published_only = true
        enforcewarninglist = true
      }
      
      # OTXQuery analyzer
      "OTXQuery_2_0" = {
        key = "otx-api-key"
        
        # Query settings
        sections = ["general", "malware", "url_list", "passive_dns"]
        max_items = 100
      }
      
      # Hippocampe analyzer
      "Hippocampe_1_0" = {
        url = "http://hippocampe.soc.local"
        
        # Authentication
        username = "cortex"
        password = "hippocampe-password"
        
        # Query settings
        timeout = 30
        max_results = 100
      }
      
      # DomainTools analyzer
      "DomainTools_2_0" = {
        username = "domaintools-username"
        key = "domaintools-api-key"
        
        # Services to query
        services = ["whois", "reverse-whois", "hosting-history", "reputation"]
        
        # Rate limiting
        rate_limit = 100  # per day
      }
    }
  }
  
  # Responder configuration
  responders {
    # Responder repository paths
    paths = [
      "/opt/cortex/responders",
      "/opt/cortex/custom-responders"
    ]
    
    # Auto-discovery settings
    auto-discovery {
      enabled = true
      scan-interval = 30 minutes
    }
    
    # Default responder settings
    defaults {
      # Resource limits
      memory-limit = 256m
      cpu-limit = 0.5
      timeout = 15 minutes
      
      # Rate limiting
      rate-limit {
        enabled = true
        requests = 50
        window = 1 hour
      }
    }
    
    # Specific responder configurations
    configs = {
      # Mailer responder
      "Mailer_1_0" = {
        # SMTP configuration
        smtp_host = "smtp.soc.local"
        smtp_port = 587
        smtp_user = "cortex-responder"
        smtp_password = "smtp-password"
        
        # Email settings
        from_email = "cortex@soc.local"
        use_tls = true
        
        # Templates
        template_folder = "/opt/cortex/templates"
      }
      
      # Slack responder
      "Slack_2_0" = {
        webhook_url = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
        
        # Default channel
        default_channel = "#soc-alerts"
        
        # Message formatting
        username = "Cortex"
        icon_emoji = ":warning:"
      }
      
      # Teams responder
      "Teams_1_0" = {
        webhook_url = "https://outlook.office.com/webhook/YOUR-TEAMS-WEBHOOK"
        
        # Message settings
        title_prefix = "[SOC Alert]"
        color = "ff6600"
      }
      
      # TheHive responder
      "TheHive_CreateAlert_1_0" = {
        url = "http://thehive:9000"
        key = "thehive-api-key"
        
        # Default alert settings
        default_severity = 2
        default_tlp = 2
        
        # Organization
        organisation = "soc-team"
      }
      
      # MISP responder
      "MISP_2_1" = {
        url = "http://misp:80"
        key = "misp-api-key"
        
        # Event creation settings
        distribution = 1  # This organization only
        threat_level = 2  # Medium
        analysis = 0     # Initial
        
        # Default tags
        tags = ["cortex-generated", "soc-automated"]
      }
      
      # IPBlocker responder
      "IPBlocker_1_0" = {
        # Firewall configuration
        firewall_type = "iptables"  # iptables, pf, windows
        
        # SSH connection for remote firewall
        ssh_host = "firewall.soc.local"
        ssh_user = "cortex"
        ssh_key = "/opt/cortex/.ssh/id_rsa"
        
        # Block duration
        default_duration = "24h"
        
        # Whitelist
        whitelist = [
          "10.0.0.0/8",
          "172.16.0.0/12", 
          "192.168.0.0/16"
        ]
      }
      
      # URLShortener responder
      "URLShortener_1_0" = {
        service = "bitly"  # bitly, tinyurl, custom
        
        # Bitly configuration
        bitly_token = "bitly-api-token"
        
        # Custom service configuration
        custom_api_url = "https://url-shortener.soc.local/api/shorten"
        custom_api_key = "custom-api-key"
      }
      
      # QRCode responder
      "QRCode_1_0" = {
        # QR code settings
        size = "300x300"
        error_correction = "M"  # L, M, Q, H
        border = 4
        
        # Output format
        format = "PNG"  # PNG, JPEG, SVG
        
        # Storage
        output_dir = "/tmp/cortex-qrcodes"
      }
      
      # DNSBlocker responder
      "DNSBlocker_1_0" = {
        # DNS server configuration
        dns_server = "dns.soc.local"
        dns_port = 53
        
        # Authentication
        api_key = "dns-api-key"
        
        # Block list settings
        block_list = "cortex-blocked"
        ttl = 300
      }
    }
  }
  
  # Organization configuration
  organization {
    # Default organization settings
    default = "soc-team"
    
    # Organization-specific configurations
    configs = {
      "soc-team" = {
        # Description
        description = "Security Operations Center Team"
        
        # User limits
        max-users = 50
        max-concurrent-jobs = 20
        
        # Job quotas
        job-quota {
          daily = 1000
          monthly = 30000
        }
        
        # Enabled analyzers and responders
        enabled-analyzers = ["*"]  # All analyzers
        disabled-analyzers = ["Test_*"]
        
        enabled-responders = ["*"]  # All responders
        disabled-responders = ["Test_*"]
        
        # Custom configuration overrides
        analyzer-configs = {}
        responder-configs = {}
      }
    }
  }
  
  # Monitoring and logging
  monitoring {
    # Metrics collection
    metrics {
      enabled = true
      
      # JVM metrics
      jvm = true
      
      # Application metrics
      job-queue = true
      analyzer-performance = true
      responder-performance = true
      
      # Export settings
      export {
        # Prometheus
        prometheus {
          enabled = true
          port = 9090
          path = "/metrics"
        }
        
        # InfluxDB
        influxdb {
          enabled = false
          url = "http://influxdb:8086"
          database = "cortex-metrics"
          username = "cortex"
          password = "influxdb-password"
        }
      }
    }
    
    # Health checks
    health {
      enabled = true
      
      checks = [
        "database",
        "docker",
        "analyzers",
        "responders",
        "job-queue"
      ]
      
      # Health check endpoint
      endpoint = "/api/health"
      timeout = 30 seconds
    }
    
    # Performance monitoring
    performance {
      # Slow job detection
      slow-jobs {
        enabled = true
        threshold = 5 minutes
        log-details = true
      }
      
      # Memory monitoring
      memory {
        warning-threshold = 80%
        critical-threshold = 95%
      }
      
      # Disk space monitoring
      disk {
        warning-threshold = 80%
        critical-threshold = 95%
        paths = ["/tmp", "/opt/cortex"]
      }
    }
  }
  
  # Security configuration
  security {
    # Content Security Policy
    csp {
      enabled = true
      policy = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    }
    
    # API security
    api {
      # Request size limits
      max-request-size = 100MB
      
      # Rate limiting (global)
      rate-limit {
        enabled = true
        requests = 10000
        window = 1 hour
      }
      
      # IP whitelisting
      ip-whitelist {
        enabled = false
        allowed-ips = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
      }
    }
    
    # File upload security
    uploads {
      # Allowed file types
      allowed-types = [
        "application/pdf",
        "text/plain",
        "application/json",
        "application/octet-stream"
      ]
      
      # File size limits
      max-file-size = 50MB
      
      # Virus scanning
      virus-scan {
        enabled = false
        command = "clamdscan --no-summary --stdout"
      }
    }
    
    # Session security
    session {
      # Session timeout
      timeout = 24 hours
      
      # Secure cookie settings
      cookie {
        secure = true
        http-only = true
        same-site = "strict"
      }
    }
  }
  
  # Notification configuration
  notifications {
    # Email notifications
    email {
      enabled = true
      
      # SMTP settings (reuse from Mailer responder)
      smtp {
        host = "smtp.soc.local"
        port = 587
        username = "cortex-notifications"
        password = "smtp-password"
        use-tls = true
      }
      
      # Email addresses
      from = "cortex@soc.local"
      admin-emails = ["admin@soc.local"]
      
      # Notification events
      events = [
        "job-failed",
        "analyzer-error",
        "responder-error",
        "system-error",
        "quota-exceeded"
      ]
    }
    
    # Webhook notifications
    webhooks {
      enabled = true
      
      endpoints = [
        {
          name = "soc-dashboard"
          url = "https://soc-dashboard.local/api/webhooks/cortex"
          events = ["job-completed", "job-failed"]
          secret = "webhook-secret-key"
        }
      ]
    }
  }
}