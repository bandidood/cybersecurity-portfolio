#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
============================================================================
Demo Campaign - Social Engineering Simulation Platform
============================================================================
Script de d√©monstration complet montrant l'utilisation de la plateforme
pour cr√©er, lancer et analyser une campagne de simulation d'ing√©nierie sociale.

Author: Cybersecurity Portfolio
Version: 1.0.0
Last Updated: January 28, 2024
============================================================================
"""

import sys
import os
import json
import time
from datetime import datetime, timedelta
from pathlib import Path

# Ajout du chemin src au PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

try:
    from phishing.campaign_manager import (
        CampaignManager, EmailTemplate, Target, 
        CampaignType, CampaignStatus
    )
    from osint.social_recon import SocialRecon, CompanyProfile, PersonProfile
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("Assurez-vous que le projet est correctement configur√©.")
    sys.exit(1)


class DemoCampaign:
    """
    D√©monstration compl√®te d'une campagne d'ing√©nierie sociale
    """
    
    def __init__(self):
        """Initialisation de la d√©monstration"""
        self.setup_demo_environment()
        self.campaign_manager = None
        self.recon_tool = None
        
    def setup_demo_environment(self):
        """Configuration de l'environnement de d√©monstration"""
        print("üîß Configuration de l'environnement de d√©monstration...")
        
        # Configuration email pour la d√©mo (utilise un serveur de test local)
        self.email_config = {
            'smtp_server': 'localhost',
            'smtp_port': 1025,  # MailHog SMTP port
            'username': 'demo@social-eng-simulation.local',
            'password': 'demo_password',
            'use_tls': False
        }
        
        # Configuration de la base de donn√©es de d√©mo
        demo_db_path = project_root / 'examples' / 'demo.db'
        self.db_path = str(demo_db_path)
        
        print("‚úÖ Environnement configur√©")
    
    def initialize_tools(self):
        """Initialisation des outils"""
        print("üõ†Ô∏è  Initialisation des outils...")
        
        try:
            # Gestionnaire de campagnes
            self.campaign_manager = CampaignManager(
                db_path=self.db_path,
                email_config=self.email_config
            )
            
            # Outil OSINT
            self.recon_tool = SocialRecon()
            
            print("‚úÖ Outils initialis√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
            return False
            
        return True
    
    def demonstrate_osint_reconnaissance(self):
        """D√©monstration de la reconnaissance OSINT"""
        print("\nüì° === D√âMONSTRATION OSINT ===")
        
        # Profil d'entreprise fictive
        print("üîç Collecte d'informations sur l'entreprise cible...")
        
        company_profile = CompanyProfile(
            domain="acmecorp-demo.com",
            name="ACME Corporation Demo",
            industry="Technology",
            size="500-1000 employees",
            locations=["New York", "San Francisco"],
            description="Soci√©t√© de d√©monstration pour les tests de s√©curit√©"
        )
        
        # Simulation de donn√©es collect√©es
        company_profile.emails_found = [
            "john.doe@acmecorp-demo.com",
            "jane.smith@acmecorp-demo.com",
            "mike.wilson@acmecorp-demo.com",
            "sarah.connor@acmecorp-demo.com"
        ]
        
        company_profile.employees = [
            {
                "name": "John Doe",
                "position": "IT Manager",
                "email": "john.doe@acmecorp-demo.com",
                "linkedin": "https://linkedin.com/in/johndoe-demo"
            },
            {
                "name": "Jane Smith",
                "position": "Finance Director",
                "email": "jane.smith@acmecorp-demo.com",
                "linkedin": "https://linkedin.com/in/janesmith-demo"
            },
            {
                "name": "Mike Wilson",
                "position": "Software Developer",
                "email": "mike.wilson@acmecorp-demo.com",
                "linkedin": "https://linkedin.com/in/mikewilson-demo"
            },
            {
                "name": "Sarah Connor",
                "position": "HR Specialist",
                "email": "sarah.connor@acmecorp-demo.com",
                "linkedin": "https://linkedin.com/in/sarahconnor-demo"
            }
        ]
        
        print(f"‚úÖ Informations collect√©es sur {company_profile.name}:")
        print(f"   üìß {len(company_profile.emails_found)} emails trouv√©s")
        print(f"   üë• {len(company_profile.employees)} employ√©s identifi√©s")
        print(f"   üè¢ Secteur: {company_profile.industry}")
        print(f"   üìç Localisations: {', '.join(company_profile.locations)}")
        
        return company_profile
    
    def create_email_templates(self):
        """Cr√©ation des templates d'email de d√©monstration"""
        print("\nüìß === CR√âATION DES TEMPLATES ===")
        
        # Template phishing IT Support
        it_support_template = EmailTemplate(
            name="IT Support - Mise √† jour s√©curit√©",
            subject="URGENT: Mise √† jour de s√©curit√© requise - Action dans 24h",
            html_content="""
            <html>
            <head>
                <style>
                    .header { background: #0066cc; color: white; padding: 20px; text-align: center; }
                    .urgent { color: #ff0000; font-weight: bold; text-transform: uppercase; }
                    .content { padding: 20px; font-family: Arial, sans-serif; }
                    .button { 
                        background: #ff6600; 
                        color: white; 
                        padding: 15px 30px; 
                        text-decoration: none; 
                        border-radius: 5px;
                        display: inline-block;
                        margin: 20px 0;
                    }
                    .footer { font-size: 12px; color: #666; padding: 20px; }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üîí ACME Corp IT Security</h1>
                </div>
                
                <div class="content">
                    <p>Bonjour {{first_name}},</p>
                    
                    <p class="urgent">‚ö†Ô∏è Action Urgente Requise ‚ö†Ô∏è</p>
                    
                    <p>
                        Notre syst√®me de s√©curit√© a d√©tect√© une tentative d'acc√®s non autoris√© 
                        sur votre compte {{email}}. Pour prot√©ger vos donn√©es et celles de l'entreprise, 
                        une mise √† jour imm√©diate de vos informations de s√©curit√© est requise.
                    </p>
                    
                    <p>
                        <strong>√âch√©ance:</strong> Cette action doit √™tre compl√©t√©e dans les <span class="urgent">24 heures</span> 
                        pour √©viter la suspension temporaire de votre compte.
                    </p>
                    
                    <div style="text-align: center;">
                        <a href="{{phishing_link}}?user={{email}}&token={{tracking_token}}" class="button">
                            üîê S√âCURISER MON COMPTE MAINTENANT
                        </a>
                    </div>
                    
                    <p>
                        Si vous n'effectuez pas cette action, votre acc√®s aux syst√®mes ACME Corp 
                        sera temporairement suspendu pour des raisons de s√©curit√©.
                    </p>
                    
                    <p>
                        Pour toute question, contactez imm√©diatement le support IT au 
                        <strong>+1-555-IT-HELP</strong>.
                    </p>
                </div>
                
                <div class="footer">
                    <p>
                        Ce message est g√©n√©r√© automatiquement par le syst√®me de s√©curit√© ACME Corp.<br>
                        ¬© 2024 ACME Corporation - Service IT S√©curit√©
                    </p>
                </div>
                
                <img src="{{tracking_pixel}}" width="1" height="1" style="display:none;">
            </body>
            </html>
            """,
            text_content="""
URGENT: Mise √† jour de s√©curit√© requise - Action dans 24h

Bonjour {{first_name}},

‚ö†Ô∏è ACTION URGENTE REQUISE ‚ö†Ô∏è

Notre syst√®me de s√©curit√© a d√©tect√© une tentative d'acc√®s non autoris√© sur votre compte {{email}}.

Pour prot√©ger vos donn√©es, cliquez sur le lien suivant dans les 24 heures:
{{phishing_link}}?user={{email}}&token={{tracking_token}}

Support IT: +1-555-IT-HELP

ACME Corp IT Security
            """,
            attachments=[]
        )
        
        print("‚úÖ Template 'IT Support' cr√©√©")
        
        # Template phishing HR
        hr_template = EmailTemplate(
            name="RH - Politique de s√©curit√©",
            subject="Nouvelle politique de s√©curit√© - Signature obligatoire",
            html_content="""
            <html>
            <head>
                <style>
                    .header { background: #2d5aa0; color: white; padding: 20px; }
                    .content { padding: 20px; font-family: Arial, sans-serif; line-height: 1.6; }
                    .button { 
                        background: #28a745; 
                        color: white; 
                        padding: 12px 25px; 
                        text-decoration: none; 
                        border-radius: 4px;
                        display: inline-block;
                    }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üë• ACME Corp Ressources Humaines</h1>
                </div>
                
                <div class="content">
                    <p>Cher {{first_name}},</p>
                    
                    <p>
                        Conform√©ment aux nouvelles r√©glementations de s√©curit√© informatique, 
                        tous les employ√©s doivent signer √©lectroniquement la mise √† jour 
                        de notre politique de s√©curit√© des donn√©es.
                    </p>
                    
                    <p>
                        <strong>Date limite:</strong> 31 janvier 2024<br>
                        <strong>Temps requis:</strong> 5-10 minutes
                    </p>
                    
                    <p>
                        Veuillez cliquer sur le lien ci-dessous pour acc√©der au document 
                        et proc√©der √† la signature √©lectronique:
                    </p>
                    
                    <p style="text-align: center;">
                        <a href="{{phishing_link}}?emp={{email}}&doc=security-policy-2024" class="button">
                            üìÑ SIGNER LE DOCUMENT
                        </a>
                    </p>
                    
                    <p>
                        Cette signature est obligatoire pour tous les employ√©s. 
                        Le non-respect de cette exigence pourrait affecter votre statut d'emploi.
                    </p>
                    
                    <p>
                        Cordialement,<br>
                        <strong>Sarah Connor</strong><br>
                        Sp√©cialiste RH - Conformit√©<br>
                        ACME Corporation
                    </p>
                </div>
            </body>
            </html>
            """,
            text_content="""
Nouvelle politique de s√©curit√© - Signature obligatoire

Cher {{first_name}},

Tous les employ√©s doivent signer la nouvelle politique de s√©curit√© des donn√©es.

Date limite: 31 janvier 2024

Cliquez ici pour signer: {{phishing_link}}?emp={{email}}&doc=security-policy-2024

Cordialement,
Sarah Connor
Sp√©cialiste RH - Conformit√©
ACME Corporation
            """
        )
        
        print("‚úÖ Template 'RH - Politique' cr√©√©")
        
        return [it_support_template, hr_template]
    
    def create_demo_targets(self, company_profile):
        """Cr√©ation des cibles de d√©monstration"""
        print("\nüéØ === CR√âATION DES CIBLES ===")
        
        targets = []
        
        for employee in company_profile.employees:
            target = Target(
                email=employee['email'],
                first_name=employee['name'].split()[0],
                last_name=' '.join(employee['name'].split()[1:]),
                position=employee['position'],
                department=self._get_department_from_position(employee['position']),
                company="ACME Corporation Demo"
            )
            targets.append(target)
        
        print(f"‚úÖ {len(targets)} cibles cr√©√©es:")
        for target in targets:
            print(f"   üë§ {target.first_name} {target.last_name} ({target.position}) - {target.email}")
        
        return targets
    
    def _get_department_from_position(self, position):
        """D√©termine le d√©partement bas√© sur le poste"""
        position_lower = position.lower()
        if 'it' in position_lower or 'software' in position_lower or 'developer' in position_lower:
            return 'IT'
        elif 'finance' in position_lower or 'accounting' in position_lower:
            return 'Finance'
        elif 'hr' in position_lower or 'human' in position_lower:
            return 'Human Resources'
        elif 'manager' in position_lower or 'director' in position_lower:
            return 'Management'
        else:
            return 'General'
    
    def create_and_launch_campaigns(self, templates, targets):
        """Cr√©ation et lancement des campagnes de d√©monstration"""
        print("\nüöÄ === CR√âATION ET LANCEMENT DES CAMPAGNES ===")
        
        campaigns_created = []
        
        # Campagne 1: IT Support (ciblant tous les employ√©s)
        print("üìß Cr√©ation de la campagne 'IT Support'...")
        
        campaign_it = self.campaign_manager.create_campaign(
            name="Demo IT Support - Mise √† jour s√©curit√©",
            campaign_type=CampaignType.PHISHING,
            targets=targets,
            description="Campagne de d√©monstration simulant un email d'IT Support urgent"
        )
        
        if campaign_it:
            print(f"‚úÖ Campagne IT cr√©√©e: {campaign_it.id}")
            campaigns_created.append(campaign_it)
        
        # Campagne 2: RH (ciblant uniquement les managers/directeurs)
        print("üìß Cr√©ation de la campagne 'RH - Politique'...")
        
        management_targets = [t for t in targets if 'manager' in t.position.lower() or 'director' in t.position.lower()]
        
        campaign_hr = self.campaign_manager.create_campaign(
            name="Demo RH - Politique de s√©curit√©",
            campaign_type=CampaignType.PHISHING,
            targets=management_targets,
            description="Campagne de d√©monstration ciblant les postes de direction avec un email RH"
        )
        
        if campaign_hr:
            print(f"‚úÖ Campagne RH cr√©√©e: {campaign_hr.id}")
            campaigns_created.append(campaign_hr)
        
        # Simulation du lancement (sans r√©ellement envoyer d'emails)
        print("\nüé¨ Simulation du lancement des campagnes...")
        
        for i, (campaign, template) in enumerate(zip(campaigns_created, templates)):
            print(f"   üöÄ Lancement de la campagne '{campaign.name}'...")
            
            # Simulation des m√©triques au fil du temps
            self._simulate_campaign_progress(campaign.id, len(campaign.targets))
            
        return campaigns_created
    
    def _simulate_campaign_progress(self, campaign_id, num_targets):
        """Simulation du progr√®s d'une campagne avec des m√©triques r√©alistes"""
        
        # Simulation des emails envoy√©s
        emails_sent = num_targets
        self.campaign_manager.update_metrics(campaign_id, emails_sent=emails_sent)
        print(f"     üì§ {emails_sent} emails envoy√©s")
        
        time.sleep(1)  # Simulation du temps
        
        # Simulation des ouvertures d'emails (70-85% en moyenne)
        import random
        open_rate = random.uniform(0.70, 0.85)
        emails_opened = int(emails_sent * open_rate)
        self.campaign_manager.update_metrics(campaign_id, emails_opened=emails_opened)
        print(f"     üìñ {emails_opened} emails ouverts ({open_rate:.1%})")
        
        time.sleep(1)
        
        # Simulation des clics (40-60% de ceux qui ont ouvert)
        click_rate = random.uniform(0.40, 0.60)
        links_clicked = int(emails_opened * click_rate)
        self.campaign_manager.update_metrics(campaign_id, links_clicked=links_clicked)
        print(f"     üñ±Ô∏è  {links_clicked} liens cliqu√©s ({click_rate:.1%} des ouvertures)")
        
        time.sleep(1)
        
        # Simulation des credentials soumis (20-40% de ceux qui ont cliqu√©)
        submit_rate = random.uniform(0.20, 0.40)
        credentials_submitted = int(links_clicked * submit_rate)
        self.campaign_manager.update_metrics(campaign_id, credentials_submitted=credentials_submitted)
        print(f"     üîê {credentials_submitted} credentials collect√©s ({submit_rate:.1%} des clics)")
        
        # Calcul des taux finaux
        self.campaign_manager._calculate_rates(campaign_id)
        
        return {
            'emails_sent': emails_sent,
            'emails_opened': emails_opened, 
            'links_clicked': links_clicked,
            'credentials_submitted': credentials_submitted
        }
    
    def generate_campaign_reports(self, campaigns):
        """G√©n√©ration des rapports de campagne"""
        print("\nüìä === G√âN√âRATION DES RAPPORTS ===")
        
        for campaign in campaigns:
            print(f"\nüìà Rapport pour '{campaign.name}':")
            
            # R√©cup√©ration des m√©triques
            metrics = self.campaign_manager.get_campaign_metrics(campaign.id)
            
            if metrics:
                print(f"   üì§ Emails envoy√©s: {metrics.emails_sent}")
                print(f"   üìñ Emails ouverts: {metrics.emails_opened} ({metrics.open_rate:.1%})")
                print(f"   üñ±Ô∏è  Liens cliqu√©s: {metrics.links_clicked} ({metrics.click_rate:.1%})")
                print(f"   üîê Credentials: {metrics.credentials_submitted} ({metrics.success_rate:.1%})")
                
                # √âvaluation du niveau de risque
                risk_score = metrics.success_rate * 10  # Score sur 10
                if risk_score >= 7:
                    risk_level = "üî¥ √âLEV√â"
                elif risk_score >= 4:
                    risk_level = "üü° MOYEN"
                else:
                    risk_level = "üü¢ FAIBLE"
                
                print(f"   ‚ö†Ô∏è  Niveau de risque: {risk_level} ({risk_score:.1f}/10)")
            else:
                print("   ‚ùå Aucune m√©trique disponible")
    
    def demonstrate_security_awareness(self):
        """D√©monstration des fonctionnalit√©s de sensibilisation"""
        print("\nüéì === SENSIBILISATION √Ä LA S√âCURIT√â ===")
        
        # Conseils de s√©curit√© bas√©s sur les r√©sultats
        security_tips = [
            "üîç V√©rifiez toujours l'exp√©diteur d'un email urgent",
            "üîó Survolez les liens avant de cliquer pour voir leur destination",
            "üìû Appelez directement le service IT en cas de doute",
            "üîê Utilisez l'authentification multifacteur quand c'est possible",
            "üìö Participez aux formations de sensibilisation √† la s√©curit√©",
            "‚ö†Ô∏è  Signalez les emails suspects √† l'√©quipe de s√©curit√©",
            "üïí M√©fiez-vous des messages cr√©ant un sentiment d'urgence",
            "üè¢ V√©rifiez les politiques d'entreprise via les canaux officiels"
        ]
        
        print("üí° Conseils de s√©curit√© pour les employ√©s:")
        for tip in security_tips:
            print(f"   {tip}")
        
        # Recommandations pour l'organisation
        print("\nüè¢ Recommandations pour l'organisation:")
        org_recommendations = [
            "üìã Mettre en place des formations r√©guli√®res de sensibilisation",
            "üéØ Organiser des campagnes de phishing internes p√©riodiques", 
            "üìû √âtablir des proc√©dures claires de signalement d'incidents",
            "üîß Impl√©menter des solutions de filtrage d'emails avanc√©es",
            "üë• Former les √©quipes IT √† reconna√Ætre les signalements",
            "üìä Mesurer r√©guli√®rement le niveau de sensibilisation",
            "üèÜ R√©compenser les bons comportements de s√©curit√©",
            "üìñ Maintenir une base de connaissances sur les menaces actuelles"
        ]
        
        for rec in org_recommendations:
            print(f"   {rec}")
    
    def cleanup_demo(self):
        """Nettoyage apr√®s la d√©monstration"""
        print("\nüßπ === NETTOYAGE ===")
        
        # Suppression de la base de donn√©es de d√©mo
        if os.path.exists(self.db_path):
            os.remove(self.db_path)
            print("‚úÖ Base de donn√©es de d√©mo supprim√©e")
        
        print("‚úÖ Nettoyage termin√©")
    
    def run_full_demo(self):
        """Ex√©cution compl√®te de la d√©monstration"""
        print("üé≠ D√âMONSTRATION COMPL√àTE - SIMULATION D'ING√âNIERIE SOCIALE")
        print("=" * 70)
        print("‚ö†Ô∏è  AVERTISSEMENT: Ceci est une d√©monstration √©ducative uniquement")
        print("=" * 70)
        
        try:
            # 1. Initialisation
            if not self.initialize_tools():
                return False
            
            # 2. Reconnaissance OSINT
            company_profile = self.demonstrate_osint_reconnaissance()
            
            # 3. Cr√©ation des templates
            templates = self.create_email_templates()
            
            # 4. Cr√©ation des cibles
            targets = self.create_demo_targets(company_profile)
            
            # 5. Cr√©ation et lancement des campagnes
            campaigns = self.create_and_launch_campaigns(templates, targets)
            
            # 6. G√©n√©ration des rapports
            self.generate_campaign_reports(campaigns)
            
            # 7. Sensibilisation
            self.demonstrate_security_awareness()
            
            print("\nüéâ === D√âMONSTRATION TERMIN√âE ===")
            print("‚úÖ Tous les composants de la plateforme ont √©t√© d√©montr√©s avec succ√®s!")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
            return False
        
        finally:
            # Nettoyage
            self.cleanup_demo()


def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©marrage de la d√©monstration...")
    
    # V√©rification de l'environnement
    if not check_environment():
        sys.exit(1)
    
    # Ex√©cution de la d√©monstration
    demo = DemoCampaign()
    success = demo.run_full_demo()
    
    if success:
        print("\nüéØ La d√©monstration s'est termin√©e avec succ√®s!")
        print("üìñ Consultez la documentation dans docs/ pour plus d'informations.")
    else:
        print("\n‚ùå La d√©monstration a rencontr√© des erreurs.")
        sys.exit(1)


def check_environment():
    """V√©rification de l'environnement avant la d√©monstration"""
    print("üîç V√©rification de l'environnement...")
    
    # V√©rification de Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    # V√©rification des dossiers n√©cessaires
    required_dirs = ['src', 'examples', 'docs']
    for dir_name in required_dirs:
        dir_path = project_root / dir_name
        if not dir_path.exists():
            print(f"‚ùå Dossier manquant: {dir_name}")
            return False
    
    print("‚úÖ Environnement v√©rifi√©")
    return True


if __name__ == "__main__":
    main()