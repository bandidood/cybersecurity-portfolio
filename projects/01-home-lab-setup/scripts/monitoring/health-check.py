#!/usr/bin/env python3
"""
health-check.py - Script de surveillance de l'√©tat du laboratoire cybers√©curit√©
Auteur: [Votre nom]
Date: 2025
Description: V√©rifie l'√©tat des ressources syst√®me, VMs, r√©seau et services
"""

import subprocess
import socket
import psutil
import json
import os
import sys
from datetime import datetime
from pathlib import Path

class LabHealthChecker:
    """Classe principale pour la surveillance du laboratoire"""
    
    def __init__(self):
        self.report = {}
        self.timestamp = datetime.now().isoformat()
        self.lab_dir = Path.home() / "lab"
        self.issues_count = 0
        
        # Configuration des seuils d'alerte
        self.thresholds = {
            'cpu': 80,      # % CPU
            'memory': 80,   # % RAM  
            'disk': 90,     # % Disque
        }
        
        # VMs critiques qui doivent √™tre en marche
        self.critical_vms = {
            'pfSense': 'pfSense-Firewall',
            'DC': 'DC-Server'
        }
        
        # Services √† surveiller
        self.services = {
            'ELK_Elasticsearch': ('172.16.2.10', 9200),
            'ELK_Kibana': ('172.16.2.10', 5601),
            'DVWA_Web': ('172.16.1.10', 80),
            'pfSense_Web': ('192.168.100.1', 443)
        }
        
        # Targets r√©seau
        self.network_targets = {
            'pfSense_LAN': '192.168.100.1',
            'DC_Server': '192.168.100.10',
            'SIEM_Server': '172.16.2.10',
            'DMZ_Web': '172.16.1.10'
        }

    def print_header(self):
        """Affiche l'en-t√™te du script"""
        print("üîç" + "="*60)
        print("  HEALTH CHECK - LABORATOIRE CYBERS√âCURIT√â")
        print(f"  Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*62)

    def check_system_resources(self):
        """V√©rification des ressources syst√®me"""
        print("\nüñ•Ô∏è V√©rification des ressources syst√®me...")
        
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # Memory
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_available_gb = round(memory.available / (1024**3), 1)
            
            # Disk
            disk = psutil.disk_usage(str(self.lab_dir))
            disk_percent = round((disk.used / disk.total) * 100, 1)
            disk_available_gb = round(disk.free / (1024**3), 1)
            
            # Stockage des m√©triques
            self.report['system'] = {
                'cpu_usage': cpu_percent,
                'memory_usage': memory_percent,
                'memory_available_gb': memory_available_gb,
                'disk_usage': disk_percent,
                'disk_available_gb': disk_available_gb,
                'status': 'healthy'
            }
            
            # V√©rification des seuils
            alerts = []
            if cpu_percent > self.thresholds['cpu']:
                alerts.append(f"CPU √©lev√©: {cpu_percent}%")
                self.issues_count += 1
            
            if memory_percent > self.thresholds['memory']:
                alerts.append(f"M√©moire √©lev√©e: {memory_percent}%")
                self.issues_count += 1
                
            if disk_percent > self.thresholds['disk']:
                alerts.append(f"Disque plein: {disk_percent}%")
                self.issues_count += 1
            
            if alerts:
                self.report['system']['status'] = 'warning'
                self.report['system']['alerts'] = alerts
                for alert in alerts:
                    print(f"  ‚ö†Ô∏è {alert}")
            
            # Affichage des m√©triques
            status_icon = "‚úÖ" if not alerts else "‚ö†Ô∏è"
            print(f"  {status_icon} CPU: {cpu_percent}% | RAM: {memory_percent}% ({memory_available_gb}GB libre)")
            print(f"     Disque: {disk_percent}% ({disk_available_gb}GB libre)")
            
        except Exception as e:
            self.report['system'] = {'error': str(e), 'status': 'error'}
            print(f"  ‚ùå Erreur syst√®me: {e}")
            self.issues_count += 1

    def check_vm_status(self):
        """V√©rification de l'√©tat des VMs"""
        print("\nüñ•Ô∏è V√©rification de l'√©tat des VMs...")
        
        # Liste des VMs √† surveiller
        all_vms = {
            'pfSense': 'pfSense-Firewall',
            'Kali': 'Kali-Attacker', 
            'DC': 'DC-Server',
            'SIEM': 'Ubuntu-SIEM',
            'DVWA': 'DVWA-Target'
        }
        
        self.report['vms'] = {}
        
        try:
            # R√©cup√©ration de la liste des VMs actives
            result = subprocess.run(['vmrun', 'list'], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode != 0:
                raise Exception("Impossible d'acc√©der √† VMware")
                
            running_vms = result.stdout
            
            # V√©rification de chaque VM
            for vm_name, vm_displayname in all_vms.items():
                is_running = vm_displayname in running_vms
                is_critical = vm_name in self.critical_vms
                
                vm_status = {
                    'status': 'running' if is_running else 'stopped',
                    'critical': is_critical,
                    'displayname': vm_displayname
                }
                
                self.report['vms'][vm_name] = vm_status
                
                # Affichage et comptage des probl√®mes
                if is_running:
                    icon = "‚úÖ"
                    status_text = "En cours"
                elif is_critical:
                    icon = "‚ùå"
                    status_text = "ARR√äT√âE (CRITIQUE)"
                    self.issues_count += 1
                else:
                    icon = "‚ö†Ô∏è"
                    status_text = "Arr√™t√©e"
                
                print(f"  {icon} {vm_name}: {status_text}")
            
            # R√©sum√©
            running_count = sum(1 for vm in self.report['vms'].values() if vm['status'] == 'running')
            total_count = len(all_vms)
            print(f"\n  üìä VMs actives: {running_count}/{total_count}")
                    
        except Exception as e:
            self.report['vms'] = {'error': str(e)}
            print(f"  ‚ùå Erreur VMs: {e}")
            self.issues_count += 1

    def check_network_connectivity(self):
        """Test de connectivit√© r√©seau"""
        print("\nüåê Test de connectivit√© r√©seau...")
        
        self.report['network'] = {}
        reachable_count = 0
        
        for name, ip in self.network_targets.items():
            try:
                # Test ping avec timeout
                result = subprocess.run(['ping', '-c', '1', '-W', '2', ip], 
                                      capture_output=True, timeout=5)
                
                is_reachable = result.returncode == 0
                
                self.report['network'][name] = {
                    'ip': ip,
                    'status': 'reachable' if is_reachable else 'unreachable',
                    'critical': name in ['pfSense_LAN', 'DC_Server']
                }
                
                if is_reachable:
                    print(f"  ‚úÖ {name} ({ip}): Accessible")
                    reachable_count += 1
                else:
                    icon = "‚ùå" if self.report['network'][name]['critical'] else "‚ö†Ô∏è"
                    print(f"  {icon} {name} ({ip}): Inaccessible")
                    if self.report['network'][name]['critical']:
                        self.issues_count += 1
                        
            except Exception as e:
                self.report['network'][name] = {
                    'ip': ip,
                    'status': f'error: {str(e)}',
                    'critical': name in ['pfSense_LAN', 'DC_Server']
                }
                print(f"  ‚ùå {name} ({ip}): Erreur - {e}")
                if self.report['network'][name]['critical']:
                    self.issues_count += 1
        
        # R√©sum√©
        total_targets = len(self.network_targets)
        print(f"\n  üìä Connectivit√©: {reachable_count}/{total_targets} cibles accessibles")

    def check_services(self):
        """V√©rification des services critiques"""
        print("\nüîß V√©rification des services...")
        
        self.report['services'] = {}
        available_count = 0
        
        for service, (host, port) in self.services.items():
            try:
                # Test de connexion socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((host, port))
                sock.close()
                
                is_available = result == 0
                
                self.report['services'][service] = {
                    'host': host,
                    'port': port,
                    'status': 'available' if is_available else 'unavailable'
                }
                
                if is_available:
                    print(f"  ‚úÖ {service}: Disponible ({host}:{port})")
                    available_count += 1
                else:
                    print(f"  ‚ö†Ô∏è {service}: Indisponible ({host}:{port})")
                    
            except Exception as e:
                self.report['services'][service] = {
                    'host': host,
                    'port': port,
                    'status': f'error: {str(e)}'
                }
                print(f"  ‚ùå {service}: Erreur - {e}")
        
        # R√©sum√©
        total_services = len(self.services)
        print(f"\n  üìä Services: {available_count}/{total_services} disponibles")

    def generate_report(self):
        """G√©n√©ration du rapport final"""
        print("\nüìÑ G√©n√©ration du rapport...")
        
        # M√©tadonn√©es du rapport
        self.report['metadata'] = {
            'timestamp': self.timestamp,
            'lab_version': '1.0',
            'total_issues': self.issues_count,
            'overall_status': 'healthy' if self.issues_count == 0 else 'issues_detected'
        }
        
        # Sauvegarde JSON
        timestamp_str = datetime.now().strftime('%Y%m%d-%H%M%S')
        report_file = self.lab_dir / 'logs' / f'health-check-{timestamp_str}.json'
        
        # Cr√©ation du r√©pertoire si n√©cessaire
        report_file.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.report, f, indent=2, ensure_ascii=False)
            
            print(f"  ‚úÖ Rapport sauvegard√©: {report_file}")
            
        except Exception as e:
            print(f"  ‚ùå Erreur sauvegarde: {e}")

    def print_summary(self):
        """Affichage du r√©sum√© final"""
        print("\n" + "="*62)
        print("üìä R√âSUM√â HEALTH CHECK")
        print("="*62)
        
        # √âtat g√©n√©ral
        if self.issues_count == 0:
            status_icon = "üü¢"
            status_text = "LABORATOIRE EN BON √âTAT"
        elif self.issues_count <= 2:
            status_icon = "üü°"
            status_text = "PROBL√àMES MINEURS D√âTECT√âS"
        else:
            status_icon = "üî¥"
            status_text = "PROBL√àMES CRITIQUES D√âTECT√âS"
        
        print(f"{status_icon} {status_text}")
        print(f"   Issues d√©tect√©es: {self.issues_count}")
        
        # D√©tails par cat√©gorie
        if 'vms' in self.report:
            running_vms = sum(1 for vm in self.report['vms'].values() 
                            if isinstance(vm, dict) and vm.get('status') == 'running')
            total_vms = len([vm for vm in self.report['vms'].values() if isinstance(vm, dict)])
            print(f"   VMs actives: {running_vms}/{total_vms}")
        
        if 'services' in self.report:
            available_services = sum(1 for svc in self.report['services'].values() 
                                   if isinstance(svc, dict) and svc.get('status') == 'available')
            total_services = len([svc for svc in self.report['services'].values() if isinstance(svc, dict)])
            print(f"   Services disponibles: {available_services}/{total_services}")
        
        if 'network' in self.report:
            reachable_targets = sum(1 for net in self.report['network'].values() 
                                  if isinstance(net, dict) and net.get('status') == 'reachable')
            total_targets = len([net for net in self.report['network'].values() if isinstance(net, dict)])
            print(f"   Connectivit√© r√©seau: {reachable_targets}/{total_targets}")
        
        print("\n‚úÖ Health Check termin√© !")
        
        # Recommandations si probl√®mes d√©tect√©s
        if self.issues_count > 0:
            print("\nüîß ACTIONS RECOMMAND√âES:")
            if self.issues_count >= 3:
                print("   ‚Ä¢ V√©rifier les ressources syst√®me")
                print("   ‚Ä¢ Red√©marrer les VMs critiques")
                print("   ‚Ä¢ Consulter les logs d'erreur")
            print("   ‚Ä¢ Ex√©cuter: vmrun list")
            print("   ‚Ä¢ V√©rifier la configuration r√©seau")

    def run_full_check(self):
        """Ex√©cution du check complet"""
        self.print_header()
        
        try:
            self.check_system_resources()
            self.check_vm_status()
            self.check_network_connectivity()
            self.check_services()
            self.generate_report()
            self.print_summary()
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Health Check interrompu par l'utilisateur")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå Erreur fatale: {e}")
            sys.exit(1)

def main():
    """Fonction principale"""
    try:
        checker = LabHealthChecker()
        checker.run_full_check()
        
        # Code de sortie bas√© sur le nombre d'issues
        sys.exit(0 if checker.issues_count == 0 else 1)
        
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        sys.exit(2)

if __name__ == "__main__":
    main()
